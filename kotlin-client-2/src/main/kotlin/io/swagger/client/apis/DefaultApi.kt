/**
 * Walking Skeleton API
 * This is the API for the Walking Skeleton.
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Location

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "url1") : ApiClient(basePath) {

    /**
     * deletes a location
     * 
     * @param deviceId The ID of the device. 
     * @return void
     */
    fun deleteLocation(deviceId: kotlin.Int): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/Location/{deviceId}".replace("{" + "deviceId" + "}", "$deviceId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * returns the location associated with device ID
     * 
     * @param deviceId The ID of the device. 
     * @return Location
     */
    @Suppress("UNCHECKED_CAST")
    fun getLocation(deviceId: kotlin.Int): Location {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Location/{deviceId}".replace("{" + "deviceId" + "}", "$deviceId")
        )
        val response = request<Location>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Location
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * returns all locations as a list
     * 
     * @return kotlin.Array<Location>
     */
    @Suppress("UNCHECKED_CAST")
    fun getLocations(): kotlin.Array<Location> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Locations"
        )
        val response = request<kotlin.Array<Location>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Location>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * adds a new location
     * 
     * @param body a JSON object of a location 
     * @return void
     */
    fun postLocation(body: Location): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Location"
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
